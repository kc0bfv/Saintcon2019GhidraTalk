\documentclass{beamer}
 
\usepackage[utf8]{inputenc}
\usepackage{comment}
\usepackage{graphicx}
\graphicspath{{./}}
 
 
%Information to be included in the title page:
\title{Reverse Engineering and Code Emulation with Ghidra}
\author{Karl "Rosie" Sickendick}
%\institute{}
\date{October 2019}
 
\AtBeginSection
{
    \begin{frame}
        \sectionpage
    \end{frame}
}

\setcounter{section}{-1}

\newcommand{\imgframe}[3]{
    \begin{frame}
    \frametitle{#1}
        \includegraphics[#3]{#2}
        \centering
    \end{frame}
}
\newcommand{\imgframeheight}[3]{
    \begin{frame}
    \frametitle{#1}
        \includegraphics[height=#3\textheight]{#2}
        \centering
    \end{frame}
}
\newcommand{\imgframewidth}[3]{
    \begin{frame}
    \frametitle{#1}
        \includegraphics[width=#3\textwidth]{#2}
        \centering
    \end{frame}
}
 
\begin{document}
 
\frame{\titlepage}
 
\begin{frame}
\frametitle{Outline}
\tableofcontents
\end{frame}

\section*{Who Am I?}
    \begin{frame}
    \frametitle{Who Am I?}
        \begin{itemize}
            \item Karl "Rosie" Sickendick
            \item Active duty Major in the Air Force
            \item Stationed at Idaho National Labs as part of an Air Force fellowship program
            \item BS in EE, MS in CS
            \item Experience with: cyber capability and tactics development
            \item Very happy to be here!
        \end{itemize}
    \end{frame}

\section{Introduction to Ghidra}
    \begin{frame}
    \frametitle{Installation \& Requirements}
        \begin{itemize}
            \item Requirements
            \begin{itemize}
                \item 4 GB RAM
                \item 824 MB disk space
                \item "Dual monitors strongly suggested" % Just included so government users have a requirement to point to?
                \item Java 11 JDK - OpenJDK 11 works % apt install openjdk-11-jdk 
            \end{itemize}
            \item Installation
            \begin{itemize}
                \item Download zip: https://ghidra-sre.org/
                \item Unzip somewhere you can write % works even without admin
                \item Make sure Java is in your PATH...
            \end{itemize}
        \end{itemize}
    \end{frame}
     
    \begin{frame}
    \frametitle{Starting Ghidra}
        \begin{itemize}
            \item Run \texttt{UNZIP\_LOCATION/ghidra\_VERSION/ghidraRun}
        \end{itemize}
        \includegraphics[height=.75\textheight]{Screenshots/AboutDialog.png}
        \centering
    \end{frame}
     
    \begin{frame}
    \frametitle{Creating a Project}
        \includegraphics[width=.9\textwidth]{Screenshots/NewProject.png}
        \centering
    \end{frame}

    \begin{frame}
    \frametitle{Creating a Project}
        \includegraphics[width=.9\textwidth]{Screenshots/ProjectType.png}
        \centering
    \end{frame}

    \begin{frame}
    \frametitle{Creating a Project}
        \includegraphics[width=.9\textwidth]{Screenshots/ProjLoc.png}
        \centering
    \end{frame}

    \begin{frame}
    \frametitle{Creating a Project}
        \includegraphics[width=.9\textwidth]{Screenshots/ProjCreated.png}
        \centering
    \end{frame}

    \begin{frame}
    \frametitle{Importing Files \& Supported Types}
        \includegraphics[width=.9\textwidth]{Screenshots/ImportFileStart.png}
        \centering
    \end{frame}

    \begin{frame}
    \frametitle{Importing Files \& Supported Types}
        \includegraphics[width=.9\textwidth]{Screenshots/ImportingFile.png}
        \centering
    \end{frame}

    \begin{frame}
    \frametitle{Importing Files \& Supported Types}
        \includegraphics[width=.9\textwidth]{Screenshots/ImportDefLang.png}
        \centering
    \end{frame}

    \begin{frame}
    \frametitle{Importing Files \& Supported Types}
        \includegraphics[width=.9\textwidth]{Screenshots/ImportMoreLang.png}
        \centering
    \end{frame}
    
    \begin{frame}
    \frametitle{Importing Files \& Supported Types}
        \begin{itemize}
            \item 6502 (NES?  Atari?)
            \item Motorolla: 6805, 68000
            \item Intel: 8048, 8051, 8085, 80251
            \item ARM \& AARCH64 \{big,little\} endian
            \item AVR\{8,32\}
            \item JVM
            \item MIPS \{32,64\} bit \{big,little\} endian
            \item PIC-\{12,16,17,18,24\}
            \item PowerPC \{32,64\} bit \{big,little\} endian
            \item Sparc
            \item TI\_MSP430
            \item x86 \{16,32,64\} bit
            \item Z\{80,180\}
        \end{itemize}
    \end{frame}

    \begin{frame}
    \frametitle{Importing Files \& Supported Types}
        \includegraphics[width=.9\textwidth]{Screenshots/PostImport.png}
        \centering
    \end{frame}

    \begin{frame}
    \frametitle{Importing Files \& Supported Types}
        \includegraphics[width=.9\textwidth]{Screenshots/Imported.png}
        \centering
    \end{frame}

    \begin{frame} % Some are architecture specific
    \frametitle{Importing Files \& Supported Types}
        \includegraphics[width=.9\textwidth]{Screenshots/Analyzers.png}
        \centering
    \end{frame}

    \begin{frame}
    \frametitle{Feature Walkthrough}
        \includegraphics[width=\textwidth]{Screenshots/MainWindow.png}
        \centering
    \end{frame}

    \begin{frame}
    \frametitle{Feature Walkthrough - Symbol Tree}
        \includegraphics[width=\textwidth]{Screenshots/SymbolTreeHighlighted.png}
        \centering
    \end{frame}
     
    \begin{frame}
    \frametitle{Feature Walkthrough - Symbol Tree}
        \includegraphics[width=.9\textwidth]{Screenshots/SymbolTreeExpand.png}
        \centering
    \end{frame}
     
    \begin{frame}
    \frametitle{Feature Walkthrough - Symbol Tree}
        \includegraphics[width=.9\textwidth]{Screenshots/SymbolTreeList.png}
        \centering
    \end{frame}

    \begin{frame}
    \frametitle{Feature Walkthrough - Program Listing}
        \includegraphics[width=.9\textwidth]{Screenshots/ProgListing.png}
        \centering
    \end{frame}

    \begin{frame}
    \frametitle{Feature Walkthrough - Program Listing}
        \includegraphics[width=.9\textwidth]{Screenshots/ProgListingCode.png}
        \centering
    \end{frame}

    \begin{frame}
    \frametitle{Feature Walkthrough - Program Listing}
        \includegraphics[width=.9\textwidth]{Screenshots/PLShowLayers.png}
        \centering
    \end{frame}

    \begin{frame}
    \frametitle{Feature Walkthrough - Program Listing}
        \includegraphics[height=.8\textheight]{Screenshots/PLShowLayersButton.png}
        \centering
    \end{frame}

    \begin{frame}
    \frametitle{Feature Walkthrough - Program Listing}
        \includegraphics[height=.8\textheight]{Screenshots/PLLayersShowing.png}
        \centering
    \end{frame}


    \imgframe{Feature Walkthrough - PCode}{Screenshots/PLTurningOnPCode.png}
            {width=\textwidth}
    \imgframe{Feature Walkthrough - PCode}{Screenshots/PLPCodeShowing.png}
            {width=\textwidth}
    \imgframe{Feature Walkthrough - PCode}{Screenshots/PCodeStepsPush.png}
            {width=\textwidth}
    \imgframe{Feature Walkthrough - PCode}{Screenshots/PCodeStepsPushPcode.png}
            {width=\textwidth}
    \imgframe{Feature Walkthrough - PCode}{Screenshots/PushPcodeClose.png}
            {width=\textwidth}
    % One great use of PCode is when you don't know the architecture
    \imgframe{Feature Walkthrough - PCode}{Screenshots/PLAarch64.png}
            {height=.8\textheight}
    \imgframe{Feature Walkthrough - PCode}{Screenshots/PLAarch64PCode.png}
            {height=.8\textheight}
    \imgframe{Feature Walkthrough - Processor Manual}{Screenshots/ProcessorManual.png}
            {height=.8\textheight}

    % Let's step through Ghidra's decompilation now.  We need something
    % a bit more complicated - let's look at a stripped binary
    \imgframe{Feature Walkthrough}{Screenshots/StrippedSymbolTree.png}
            {height=.8\textheight}

    % Where do we start without a main? We might go to the entry function.
    % We have a couple clues here about which function is the main function.
    % We can double click on these to view their disassembly and decompilation,
    % but a great place to start when reversing a binary is at the strings.
    \imgframe{Feature Walkthrough}{Screenshots/LookingAtC.png}
            {width=\textwidth}

    % Ghidra's got a strings window.  Let's look at some of the other features
    \imgframe{Feature Walkthrough - Windows Available}{Screenshots/WindowDialog.png}
            {height=.8\textheight}

    % The defined strings window shows all the strings Ghidra found in analysis
    \imgframewidth{Feature Walkthrough - Strings}{Screenshots/Strings.png}
            {1}

    % Selecting that string jumps to it in the program listing window, where we
    % see a reference to that string.
    \imgframewidth{Feature Walkthrough - Strings}{Screenshots/StringFound.png}{1}

    % Following the reference takes us to a function that looks like the main function
    \imgframewidth{Feature Walkthrough - Decompilation}{Screenshots/StringInDecompile.png}{1}

    \imgframe{Feature Walkthrough - Decompilation}{Screenshots/InitialFuncSig.png}
            {width=\textwidth}

    \imgframe{Feature Walkthrough - Decompilation}{Screenshots/FinalFuncSig.png}
            {width=\textwidth}

    % You can see that after setting the function signature, many parts of the
    % decompilation become much clearer.  Recommend you do set types and names
    % whenever possible.
    \imgframe{Feature Walkthrough - Decompilation}{Screenshots/MainAfterSig.png}
            {width=\textwidth}

    \imgframewidth{Feature Walkthrough - Decompilation}{Screenshots/CreateParamsReturn.png}{1}

    % Building structures really aids reversing efforts.  Ghidra incorporates
    % structure instances into the decompilation, and even propagates them through
    % function definitions if you set one as a parameter type.
    \imgframewidth{Feature Walkthrough - Building Structures}{Screenshots/MainWindow.png}{1}
    % All the data types are accessible down here in the main window
    \imgframewidth{Feature Walkthrough - Building Structures}{Screenshots/MainWindowDataType.png}{1}
    % Let's look at a function that builds and uses a structure.  Ghidra's analysis
    % determined that this function uses nanosleep.  That's because it was imported.
    % Imports - another great hint as to what's going on in a stripped binary.
    % Ghidra has built the structure nanosleep needs, which the man pages call a
    % timespec struct - and so does Ghidra.
    % You can see the structure members being set clearly, and it has even
    % backed the structure member type up into the function signature.
    \imgframewidth{Feature Walkthrough - Building Structures}{Screenshots/SleepFunc.png}{1}
    % Here's what the structure looks like when you try to edit it, perhaps by right
    % clicking on an variable instance.
    \imgframewidth{Feature Walkthrough - Building Structures}{Screenshots/SleepStruct.png}{1}

    % Just one more thing I want to show off...  Lot's of people like a graph view.
    \imgframewidth{Feature Walkthrough - Function Graphs}{Screenshots/MainGraph.png}{1}
     
    % Stuff that is awesome, but isn't getting a slide
    \begin{frame}
    \frametitle{Feature Walkthrough}
        \begin{itemize}
            \item Undo!
            \item Middle clicking an entity to highlight all instances
            \item Binary view
            \item Highlight interdependence as forward and backward slices
            \item Function Call Trees %give you an expandable-tree-menu view of the references to and from a function
            \item C++ classes % This has been pretty painful in my experience though, but I haven't used it in several versions
            \item Linking to other binaries % Link a binary to its libraries to simplify cross-reference.  Types can flow between binaries, so structures passed in a library function call can get set in both places easily
            \item Server mode % Easily work with your team
            \item Addons % This transitions into my demo because we'll be starting the addon...
        \end{itemize}
    \end{frame}

\section{PCode Emulation with Python}
    \begin{frame}
    \frametitle{PCode Emulation with Python - Use Cases} % The, who cares?
    \begin{itemize}
        \item General Benefits
        \begin{itemize}
            \item Middle ground between static \& dynamic analysis % Often during static analysis you want to just examine one function or portion of code with dynamic analysis
            \item Simplifies analysis requiring hardware breakpoints % Memory area read/write breakpoints, for instance
            \item Customize environment for dynamic-ish analysis % Including - syscall behavior.  Is there something about the system where this is intended to run that isn't easy to emulate without kernel level debugging?  Well, we control all libraries, potentially.
        \end{itemize}
        \item Obvious Use Cases
        \begin{itemize}
            \item Examining malicious code behavior
            \item Reversing crypto algorithms
            \item Reversing code from an unusual architecture
        \end{itemize}
    \end{itemize}
    \end{frame}

    \begin{frame}
    \frametitle{PCode Emulation with Python - Shortcomings \& Next Steps}
    \begin{itemize}
        \item Shortcomings
        \begin{itemize}
            \item Interface is rough
            \item Problems with headless mode
            \item Syscall handling... % interface w/Angr?  Leverage their handling?
        \end{itemize}
        \item Improvements
        \begin{itemize}
            \item Improve those shortcomings
            \item More analysis methods than "execute a function" % Enabled by a better interface...
            \item Breakpoints!
            \item Simplify environment input and output
        \end{itemize}
    \end{itemize}
    \end{frame}

\section{Ghidra Addons via Python}
    \begin{frame}
    \frametitle{Why Use Python} % instead of Java
    \end{frame}
     
    \begin{frame}
    \frametitle{How Does Ghidra Employ Python?}
    \end{frame}
     
    \begin{frame}
    \frametitle{Help Documentation} % Especially the flat api
    \end{frame}
     
    \begin{frame}
    \frametitle{Minimal Python Addon Example}
    \end{frame}
     
    \begin{frame}
    \frametitle{PCode Emulator Walkthrough}
    \end{frame}

\section*{Resources}
    \begin{frame}
    \frametitle{Ghidra Usage Do's and Don'ts}
    % Do build structures, classes, function signatures, link to other binaries, add data types to make life simpler
    \end{frame}

    \begin{frame}
    \frametitle{Links For More Info}
    https://ghidra-sre.org/
    https://github.com/0xAlexei/INFILTRATE2019

    \end{frame}

\end{document}
